#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#
# Copyright (c) 2023 University of Dundee.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED.
#   IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
#   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
#   DAMAGE.
#
# Version: 1.0
#

# This is a scripted version of the Day_4/Cellpose.ipynb notebook
# In that case, we save the outlines generated by Cellpose as text
# files on disk.
# In the command below, we assume that you are in the
# directory Day_4/scripts.
# This script must be run the imaging_course_cellpose_day4_2023 environment i.e.
#  conda activate imaging_course_cellpose_day4_2023
#  python cellpose.py

import numpy
import re
import time

# omero
from omero.gateway import BlitzGateway
from omero_zarr import masks
import omero
from omero.rtypes import rdouble, rint, rstring

# cellpose
from cellpose import io, models, utils


# Connect to the server
def connect(hostname, username, password):
    """
    Connect to the server
    """
    conn = BlitzGateway(username, password,
                        host=hostname, secure=True)
    print("Connected: %s" % conn.connect())
    conn.c.enableKeepAlive(60)
    return conn


# Load-image
def load_image(conn, image_id):
    """
    Load the Image object.
    """
    return conn.getObject('Image', image_id)


# Load-Binary-from-server
def load_binary_from_server(image):
    """
    Load the binary data as a TCZYX numpy array.
    """
    pixels = image.getPrimaryPixels()
    size_z = image.getSizeZ()
    size_c = image.getSizeC()
    size_t = image.getSizeT()
    size_y = image.getSizeY()
    size_x = image.getSizeX()
    z, t, c = 0, 0, 0  # first plane of the image

    zct_list = []
    for t in range(size_t):
        for c in range(size_c):  # all channels
            for z in range(size_z):  # get the Z-stack
                zct_list.append((z, c, t))

    values = []
    # Load all the planes as YX numpy array
    planes = pixels.getPlanes(zct_list)
    s = "t:%s c:%s z:%s y:%s x:%s" % (size_t, size_c, size_z, size_y, size_x)
    print(s)
    print("Downloading image %s" % image.getName())
    all_planes = numpy.stack(list(planes))
    shape = (size_t, size_c, size_z, size_y, size_x)
    return numpy.reshape(all_planes, newshape=shape)


# Load-Labels-as-Masks
def load_labels_as_masks(conn, image):
    """
    Loads the masks from server
    """
    roi_service = conn.getRoiService()
    result = roi_service.findByImage(image.getId(), None)

    dims = (image.getSizeT(), image.getSizeC(), image.getSizeZ(),
            image.getSizeY(), image.getSizeX())
    shapes = []
    for roi in result.rois:
        shapes.append(roi.copyShapes())

    saver = masks.MaskSaver(None, image, numpy.int64)
    labels, fillColors, properties = saver.masks_to_labels(shapes, mask_shape=dims)


# Create roi
def create_roi(image, shapes):
    # create an ROI, link it to Image
    roi = omero.model.RoiI()
    # use the omero.model.ImageI that underlies the 'image' wrapper
    roi.setImage(img._obj)
    for shape in shapes:
        roi.addShape(shape)
    return roi


# Convert roi into ome rois
def convert_roi(name):
    polygons = []
    with open(name + "_cp_outlines.txt", "r") as text_file:
        for line in text_file:
            points = re.sub(r',([^,]*),', r',\1, ', line)
            polygon = omero.model.PolygonI()
            polygon.theZ = rint(z)
            polygon.theT = rint(t)
            polygon.points = rstring(points)
            polygons.append(polygon)
    return create_roi(image, polygons)


# Disconnect
def disconnect(conn):
    conn.close()


# main
def main():
    # Collect user credentials
    try:
        host = "ws://idr.openmicroscopy.org/omero-ws"
        username = "public"
        password = "public"
        image_id = "6001247"

        # Connect to the server
        conn = connect(host, username, password)

        # Load the image
        image = load_image(conn, image_id)

        global data
        data = load_binary_from_server(image)
        labels = load_labels_as_masks(conn, image)

        # Load the Cellpose model
        model = models.Cellpose(gpu=False, model_type='cyto')

        # Analyse the data
        channels = [[0, 1]]
        t = 0
        z = int(image.getPrimaryPixels().getSizeZ() / 2)
        cellpose_masks, flows, styles, diams = model.eval(data[t, :, z, :, :], diameter=None, channels=channels)  # noqa

        # Save the outlines on disk
        n = str(image_id) + "_" + str(z)
        outlines = utils.outlines_list(cellpose_masks)
        io.outlines_to_text(n, outlines)


    finally:
        disconnect(conn)
    print('done')


if __name__ == "__main__":
    main()

